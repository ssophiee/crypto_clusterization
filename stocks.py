# -*- coding: utf-8 -*-
"""stocks.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EjvCB6LHyNohdKVdvw1obCCzk1rdwIW7
"""

import numba
import stumpy

import plotly.graph_objs as go

import yfinance as yf

import pandas as pd
import numpy as np

import datetime  

import matplotlib.pyplot as plt

import seaborn as sns

import tqdm
from tqdm import tqdm
import tslearn

from tslearn.clustering import TimeSeriesKMeans, silhouette_score
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler


import tsfresh
from tsfresh import extract_features, extract_relevant_features, select_features, feature_extraction
from tsfresh.feature_extraction import settings

from sklearn.feature_selection import VarianceThreshold

from statsmodels.tsa.arima.model import ARIMA

def Candlestick_month(symbol, name):
    ''' Returns the candlestick graph dynamics per month
  
    Parameters
    ----------
    symbol: str
        ticker symbol for a company 
    name: str
        company name for a graph
    
    '''

    fig = go.Figure()

    asset = yf.download(tickers=symbol, period = '1mo', interval = '1d')
    #Candlestick
    fig.add_trace(go.Candlestick(x=asset.index,
                    open=asset['Open'],
                    high=asset['High'],
                    low=asset['Low'],
                    close=asset['Close'], name = 'market data'))

    # Add titles
    fig.update_layout(
        title= f'{name} live share price evolution',
        yaxis_title= f'{name} Price (kUS Dollars)')

    #Show
    fig.show()

# Candlestick graph dynamics per day

def Candlestick(symbol, name):
    ''' Returns the candlestick graph dynamics per day
  
    Parameters
    ----------
    symbol: str
        ticker symbol for a company 
    name: str
        company name for a graph
    
    '''

    fig = go.Figure()

    asset = yf.download(tickers=symbol, period = '22h', interval = '15m')
    #Candlestick
    fig.add_trace(go.Candlestick(x=asset.index,
                    open=asset['Open'],
                    high=asset['High'],
                    low=asset['Low'],
                    close=asset['Close'], name = 'market data'))

    # Add titles
    fig.update_layout(
        title= f'{name} live share price evolution',
        yaxis_title= f'{name} Price (kUS Dollars)')

    # X-Axes
    fig.update_xaxes(
        rangeslider_visible=True,
        rangeselector=dict(
            buttons=list([
                dict(count=15, label="15m", step="minute", stepmode="backward"),
                dict(count=45, label="45m", step="minute", stepmode="backward"),
                dict(count=1, label="HTD", step="hour", stepmode="todate"),
                dict(count=6, label="6h", step="hour", stepmode="backward"),
                dict(step="all")
            ])
        )
    )

    #Show
    fig.show()

#Information about an asset

def crypto_info(symbol, year_start=2021, month_start=1, day_start=1, year_end=2021, month_end=11, day_end=14):
    ''' Returns the information about the company's stock price
  
    Parameters
    ----------
    symbol: str
        ticker symbol for a company 
    year_start: int
        year when the analysis begins [default=2021]
    month_start: 
        month when the analysis begins [default=1]
    day_start:
        day when the analysis begins [default=1]
    year_end:
        year when the analysis ends [default=2021]
    month_end:
        month when the analysis ends [default=11]
    day_end: 
        day when the analysis ends [default=14]
    '''

    start = datetime.datetime(year_start, month_start, day_start)
    end = datetime.datetime(year_end, month_end, day_end) 

    asset_info = yf.download(symbol, start=start, end=end)
    return asset_info

def visualize_cluster(current_cluster, df):
    ''' Returns the graph with a chosen cluster
  
    Parameters
    ----------
    current_cluster: int
        cluster for visulaization
    df: dataframe
        dataframe with clusters 
    '''
    list_asset = [asset for asset in df.index if df.loc[asset, 'clusters'] == current_cluster]          
    print(f'There are {len(list_asset)} in {current_cluster} cluster')
    for i in range(df.shape[0]): #fig, ax = plt.subplots(,3)
        line = df['clusters'][i]
        if line == current_cluster:
            plt.plot(df.iloc[i, :-1])
            plt.xticks(rotation=45)
            plt.title(df.index[i])
            plt.show()

def crypto_prediction(crypto_ticker, start='2021-11-01 00:00:00', end='2021-01-30 00:00:00'):
    ''' Returns the crypto currency prediction for a particular time frame
  
    Parameters
    ----------
    crypto_ticker: str
        cluster for visulaization
    start: str
        data when the prediction begins [default: '2021-11-01 00:00:00']
    end: str
        data when the prediction ends [default: '2021-01-30 00:00:00']
    
    '''

    mod = ARIMA(assets_tr_.loc[crypto_ticker, :], order=(1,0, 0), freq='D')
    res = mod.fit()
    pred = res.predict(start=start, end=end)

    plt.plot(assets_tr_.loc[crypto_ticker, '2021-10-01 00:00:00':])

    plt.plot(pred)
    plt.xticks(rotation=45)

    plt.show()

